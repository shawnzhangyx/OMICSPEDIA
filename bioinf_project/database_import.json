[{"pk": 1, "model": "auth.permission", "fields": {"codename": "add_logentry", "name": "Can add log entry", "content_type": 1}}, {"pk": 2, "model": "auth.permission", "fields": {"codename": "change_logentry", "name": "Can change log entry", "content_type": 1}}, {"pk": 3, "model": "auth.permission", "fields": {"codename": "delete_logentry", "name": "Can delete log entry", "content_type": 1}}, {"pk": 4, "model": "auth.permission", "fields": {"codename": "add_permission", "name": "Can add permission", "content_type": 2}}, {"pk": 5, "model": "auth.permission", "fields": {"codename": "change_permission", "name": "Can change permission", "content_type": 2}}, {"pk": 6, "model": "auth.permission", "fields": {"codename": "delete_permission", "name": "Can delete permission", "content_type": 2}}, {"pk": 7, "model": "auth.permission", "fields": {"codename": "add_group", "name": "Can add group", "content_type": 3}}, {"pk": 8, "model": "auth.permission", "fields": {"codename": "change_group", "name": "Can change group", "content_type": 3}}, {"pk": 9, "model": "auth.permission", "fields": {"codename": "delete_group", "name": "Can delete group", "content_type": 3}}, {"pk": 10, "model": "auth.permission", "fields": {"codename": "add_user", "name": "Can add user", "content_type": 4}}, {"pk": 11, "model": "auth.permission", "fields": {"codename": "change_user", "name": "Can change user", "content_type": 4}}, {"pk": 12, "model": "auth.permission", "fields": {"codename": "delete_user", "name": "Can delete user", "content_type": 4}}, {"pk": 13, "model": "auth.permission", "fields": {"codename": "add_contenttype", "name": "Can add content type", "content_type": 5}}, {"pk": 14, "model": "auth.permission", "fields": {"codename": "change_contenttype", "name": "Can change content type", "content_type": 5}}, {"pk": 15, "model": "auth.permission", "fields": {"codename": "delete_contenttype", "name": "Can delete content type", "content_type": 5}}, {"pk": 16, "model": "auth.permission", "fields": {"codename": "add_session", "name": "Can add session", "content_type": 6}}, {"pk": 17, "model": "auth.permission", "fields": {"codename": "change_session", "name": "Can change session", "content_type": 6}}, {"pk": 18, "model": "auth.permission", "fields": {"codename": "delete_session", "name": "Can delete session", "content_type": 6}}, {"pk": 19, "model": "auth.permission", "fields": {"codename": "add_tag", "name": "Can add tag", "content_type": 7}}, {"pk": 20, "model": "auth.permission", "fields": {"codename": "change_tag", "name": "Can change tag", "content_type": 7}}, {"pk": 21, "model": "auth.permission", "fields": {"codename": "delete_tag", "name": "Can delete tag", "content_type": 7}}, {"pk": 22, "model": "auth.permission", "fields": {"codename": "add_mainpostrevision", "name": "Can add main post revision", "content_type": 8}}, {"pk": 23, "model": "auth.permission", "fields": {"codename": "change_mainpostrevision", "name": "Can change main post revision", "content_type": 8}}, {"pk": 24, "model": "auth.permission", "fields": {"codename": "delete_mainpostrevision", "name": "Can delete main post revision", "content_type": 8}}, {"pk": 25, "model": "auth.permission", "fields": {"codename": "add_replypostrevision", "name": "Can add reply post revision", "content_type": 9}}, {"pk": 26, "model": "auth.permission", "fields": {"codename": "change_replypostrevision", "name": "Can change reply post revision", "content_type": 9}}, {"pk": 27, "model": "auth.permission", "fields": {"codename": "delete_replypostrevision", "name": "Can delete reply post revision", "content_type": 9}}, {"pk": 28, "model": "auth.permission", "fields": {"codename": "add_mainpost", "name": "Can add main post", "content_type": 10}}, {"pk": 29, "model": "auth.permission", "fields": {"codename": "change_mainpost", "name": "Can change main post", "content_type": 10}}, {"pk": 30, "model": "auth.permission", "fields": {"codename": "delete_mainpost", "name": "Can delete main post", "content_type": 10}}, {"pk": 31, "model": "auth.permission", "fields": {"codename": "add_replypost", "name": "Can add reply post", "content_type": 11}}, {"pk": 32, "model": "auth.permission", "fields": {"codename": "change_replypost", "name": "Can change reply post", "content_type": 11}}, {"pk": 33, "model": "auth.permission", "fields": {"codename": "delete_replypost", "name": "Can delete reply post", "content_type": 11}}, {"pk": 34, "model": "auth.permission", "fields": {"codename": "add_mainpostcomment", "name": "Can add main post comment", "content_type": 12}}, {"pk": 35, "model": "auth.permission", "fields": {"codename": "change_mainpostcomment", "name": "Can change main post comment", "content_type": 12}}, {"pk": 36, "model": "auth.permission", "fields": {"codename": "delete_mainpostcomment", "name": "Can delete main post comment", "content_type": 12}}, {"pk": 37, "model": "auth.permission", "fields": {"codename": "add_replypostcomment", "name": "Can add reply post comment", "content_type": 13}}, {"pk": 38, "model": "auth.permission", "fields": {"codename": "change_replypostcomment", "name": "Can change reply post comment", "content_type": 13}}, {"pk": 39, "model": "auth.permission", "fields": {"codename": "delete_replypostcomment", "name": "Can delete reply post comment", "content_type": 13}}, {"pk": 40, "model": "auth.permission", "fields": {"codename": "add_page", "name": "Can add page", "content_type": 14}}, {"pk": 41, "model": "auth.permission", "fields": {"codename": "change_page", "name": "Can change page", "content_type": 14}}, {"pk": 42, "model": "auth.permission", "fields": {"codename": "delete_page", "name": "Can delete page", "content_type": 14}}, {"pk": 43, "model": "auth.permission", "fields": {"codename": "add_pagerevision", "name": "Can add page revision", "content_type": 15}}, {"pk": 44, "model": "auth.permission", "fields": {"codename": "change_pagerevision", "name": "Can change page revision", "content_type": 15}}, {"pk": 45, "model": "auth.permission", "fields": {"codename": "delete_pagerevision", "name": "Can delete page revision", "content_type": 15}}, {"pk": 46, "model": "auth.permission", "fields": {"codename": "add_migrationhistory", "name": "Can add migration history", "content_type": 16}}, {"pk": 47, "model": "auth.permission", "fields": {"codename": "change_migrationhistory", "name": "Can change migration history", "content_type": 16}}, {"pk": 48, "model": "auth.permission", "fields": {"codename": "delete_migrationhistory", "name": "Can delete migration history", "content_type": 16}}, {"pk": 49, "model": "auth.permission", "fields": {"codename": "add_comment", "name": "Can add comment", "content_type": 17}}, {"pk": 50, "model": "auth.permission", "fields": {"codename": "change_comment", "name": "Can change comment", "content_type": 17}}, {"pk": 51, "model": "auth.permission", "fields": {"codename": "delete_comment", "name": "Can delete comment", "content_type": 17}}, {"pk": 52, "model": "auth.permission", "fields": {"codename": "add_userprofile", "name": "Can add user profile", "content_type": 18}}, {"pk": 53, "model": "auth.permission", "fields": {"codename": "change_userprofile", "name": "Can change user profile", "content_type": 18}}, {"pk": 54, "model": "auth.permission", "fields": {"codename": "delete_userprofile", "name": "Can delete user profile", "content_type": 18}}, {"pk": 55, "model": "auth.permission", "fields": {"codename": "add_vote", "name": "Can add vote", "content_type": 19}}, {"pk": 56, "model": "auth.permission", "fields": {"codename": "change_vote", "name": "Can change vote", "content_type": 19}}, {"pk": 57, "model": "auth.permission", "fields": {"codename": "delete_vote", "name": "Can delete vote", "content_type": 19}}, {"pk": 1, "model": "auth.group", "fields": {"name": "moderator", "permissions": []}}, {"pk": 1, "model": "auth.user", "fields": {"username": "yanxiazh", "first_name": "", "last_name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2014-08-12T20:51:56.109Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$12000$4jDhq91Ikbex$SWwUFdT2lXXrt4GyRJzNfAzrOgMXvQr2XsqLKOtWWRg=", "email": "", "date_joined": "2014-07-20T06:53:00.868Z"}}, {"pk": 2, "model": "auth.user", "fields": {"username": "yyy", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2014-08-13T05:28:54.293Z", "groups": [1], "user_permissions": [], "password": "pbkdf2_sha256$12000$6CCWrFoVSmKR$Zgl/ouVx+s247CZPF3q4NqL14fFYwcYHkZV+TwyCWQk=", "email": "", "date_joined": "2014-07-24T19:36:35Z"}}, {"pk": 3, "model": "auth.user", "fields": {"username": "test", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2014-07-28T04:53:04.151Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$12000$x4BkJysm7Jyr$yrabI+UiBfcWyFP+MEaMoVwvZ7Wl4aUZQTwMbZi0YyY=", "email": "", "date_joined": "2014-07-28T04:52:56.362Z"}}, {"pk": 4, "model": "auth.user", "fields": {"username": "newuser", "first_name": "", "last_name": "", "is_active": true, "is_superuser": false, "is_staff": false, "last_login": "2014-07-30T20:15:43.702Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$12000$AsW9QcGZ7bS2$XGE2mjhziXHm3U6pLYMXiQ2nEc+QvFHJAqap3bUg8Ic=", "email": "", "date_joined": "2014-07-30T20:15:05.254Z"}}, {"pk": "1r2m3bbyhmlqc755k7qccvzfhw2knnnz", "model": "sessions.session", "fields": {"expire_date": "2014-08-09T02:42:36.772Z", "session_data": "ZmMwZDk0ZTMyMTE2OWQ0MjVkMmFhMzA1MWRmNThlZmViMmJkMGRhYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}}, {"pk": "24tcjt5j6b879i976g4jeu2e8k8omvws", "model": "sessions.session", "fields": {"expire_date": "2014-08-09T05:08:06.580Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "3bf4ibs0qt9n9nas1j8iz39xcubdq8pg", "model": "sessions.session", "fields": {"expire_date": "2014-08-15T16:54:02.017Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "3ih6x2z3u2rymh8iw5kr7mjbdlh6ha3m", "model": "sessions.session", "fields": {"expire_date": "2014-08-23T06:34:15.841Z", "session_data": "MjEyMzJjNDYxZWIxMWQ1ZTVmNzhmOGQ4YTQzNjg5YjAzNzgwNGU1ZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6Mn0="}}, {"pk": "59q8b0joelqf3ud085o074lxlxld5cec", "model": "sessions.session", "fields": {"expire_date": "2014-08-10T02:38:47.031Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "5zkzzoznfv2uiobuqj8vhelmsxg7erwp", "model": "sessions.session", "fields": {"expire_date": "2014-08-15T20:41:45.580Z", "session_data": "MjEyMzJjNDYxZWIxMWQ1ZTVmNzhmOGQ4YTQzNjg5YjAzNzgwNGU1ZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6Mn0="}}, {"pk": "b0t6e3sdz5hqkoh87ya0535bdy7cv8v3", "model": "sessions.session", "fields": {"expire_date": "2014-08-06T05:10:29.390Z", "session_data": "ZmMwZDk0ZTMyMTE2OWQ0MjVkMmFhMzA1MWRmNThlZmViMmJkMGRhYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}}, {"pk": "cwpuuecub8m85t7a5vhsfd5nn75ngzn4", "model": "sessions.session", "fields": {"expire_date": "2014-08-27T15:10:57.336Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "dxc262vfgofdwqpc279056hluaj36avq", "model": "sessions.session", "fields": {"expire_date": "2014-08-09T02:28:53.766Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "hfidahn12j0c8a1wghknea82ukmohd2u", "model": "sessions.session", "fields": {"expire_date": "2014-08-27T05:28:54.296Z", "session_data": "MjEyMzJjNDYxZWIxMWQ1ZTVmNzhmOGQ4YTQzNjg5YjAzNzgwNGU1ZTp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6Mn0="}}, {"pk": "hrudu8t5tk1jydhmqmbnk23vl5294e1y", "model": "sessions.session", "fields": {"expire_date": "2014-08-09T01:21:25.556Z", "session_data": "ZmMwZDk0ZTMyMTE2OWQ0MjVkMmFhMzA1MWRmNThlZmViMmJkMGRhYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}}, {"pk": "jobjipl42rju33syaidge5l7fsy6reg4", "model": "sessions.session", "fields": {"expire_date": "2014-08-15T06:25:10.411Z", "session_data": "ZmMwZDk0ZTMyMTE2OWQ0MjVkMmFhMzA1MWRmNThlZmViMmJkMGRhYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}}, {"pk": "sw64yex0hfej9ogdvo5w7sjmo5noq5ju", "model": "sessions.session", "fields": {"expire_date": "2014-08-08T21:47:44.634Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "trme48b2ccvblija36bdyvam2gcsnit1", "model": "sessions.session", "fields": {"expire_date": "2014-08-14T13:45:39.265Z", "session_data": "ZmMwZDk0ZTMyMTE2OWQ0MjVkMmFhMzA1MWRmNThlZmViMmJkMGRhYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}}, {"pk": "wuctzhjxn5oukrhzno6skmjubk9xlelw", "model": "sessions.session", "fields": {"expire_date": "2014-08-15T19:04:43.837Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "wya8jmwjlkwtnf04sbbis8vpnirl4m6z", "model": "sessions.session", "fields": {"expire_date": "2014-08-27T17:55:12.618Z", "session_data": "ZmMwZDk0ZTMyMTE2OWQ0MjVkMmFhMzA1MWRmNThlZmViMmJkMGRhYzp7Il9hdXRoX3VzZXJfYmFja2VuZCI6ImRqYW5nby5jb250cmliLmF1dGguYmFja2VuZHMuTW9kZWxCYWNrZW5kIiwiX2F1dGhfdXNlcl9pZCI6MX0="}}, {"pk": "xpov7f7ivj6fp0u7h2r5p8eanif5ig0p", "model": "sessions.session", "fields": {"expire_date": "2014-08-19T04:00:49.127Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": "z0z7h49ef8xdfzmxiysu7sydhnb88xux", "model": "sessions.session", "fields": {"expire_date": "2014-08-15T17:25:58.536Z", "session_data": "ZDIxMzFmZTM1ZmU5MWM5MDBlMDMwMmYxNzEwNDM3Mjc4NmM0MzM5Yjp7fQ=="}}, {"pk": 1, "model": "tags.tag", "fields": {"count": 0, "name": "ChIP-Seq", "parent": null, "tags": [1, 2], "node_position": 0, "categories": 0}}, {"pk": 2, "model": "tags.tag", "fields": {"count": 0, "name": "pre-processing", "parent": 1, "tags": [2], "node_position": 0, "categories": 0}}, {"pk": 3, "model": "tags.tag", "fields": {"count": 0, "name": "normalization", "parent": 1, "tags": [3], "node_position": 0, "categories": 0}}, {"pk": 4, "model": "tags.tag", "fields": {"count": 0, "name": "post-processing", "parent": 1, "tags": [4], "node_position": 0, "categories": 0}}, {"pk": 5, "model": "tags.tag", "fields": {"count": 0, "name": "haha", "parent": null, "tags": [5], "node_position": 0, "categories": 0}}, {"pk": 7, "model": "tags.tag", "fields": {"count": 0, "name": "RNA-Seq", "parent": null, "tags": [7], "node_position": 0, "categories": 0}}, {"pk": 1, "model": "posts.mainpostrevision", "fields": {"content": " ", "modified_date": "2014-08-12T06:33:49.744Z", "post": 1, "revision_summary": "", "revision_number": 1}}, {"pk": 2, "model": "posts.mainpostrevision", "fields": {"content": " sdfdf", "modified_date": "2014-08-12T06:33:59.428Z", "post": 2, "revision_summary": "", "revision_number": 1}}, {"pk": 3, "model": "posts.mainpostrevision", "fields": {"content": "  see if the time shows up correctly", "modified_date": "2014-08-12T20:47:51.730Z", "post": 3, "revision_summary": "", "revision_number": 1}}, {"pk": 4, "model": "posts.mainpostrevision", "fields": {"content": "   see if the time shows up correctly ", "modified_date": "2014-08-12T20:53:02.741Z", "post": 3, "revision_summary": " No summary ", "revision_number": 2}}, {"pk": 5, "model": "posts.mainpostrevision", "fields": {"content": "I need to write some something here. I need to write some something here. I need to write some something here. I need to write some something here. I need to write some something here. I need to write some something here. I need to write some something here. ", "modified_date": "2014-08-13T01:44:02.656Z", "post": 1, "revision_summary": "I wrote some summary", "revision_number": 2}}, {"pk": 6, "model": "posts.mainpostrevision", "fields": {"content": "Hi!\r\n\r\nDear all,\r\n\r\nI was thinking it would be great, if we all (specially people working with ChIP seq data analysis) could write a small tutorial or a pipeline for ChIP seq data analysis, incorporating only the tools which are available on web.\r\n\r\nThis would immensely help in many ways, like knowledge base would be integrated and we all will learn from each others experience and moreover it will be of great help to any new comer.\r\n\r\nLet me know what you all think of this idea?", "modified_date": "2014-08-13T05:27:06.106Z", "post": 1, "revision_summary": " No summary ", "revision_number": 3}}, {"pk": 7, "model": "posts.mainpostrevision", "fields": {"content": " ", "modified_date": "2014-08-13T05:29:33.710Z", "post": 4, "revision_summary": "", "revision_number": 1}}, {"pk": 8, "model": "posts.mainpostrevision", "fields": {"content": " ", "modified_date": "2014-08-13T05:29:55.028Z", "post": 5, "revision_summary": "", "revision_number": 1}}, {"pk": 9, "model": "posts.mainpostrevision", "fields": {"content": " ", "modified_date": "2014-08-13T05:30:06.692Z", "post": 6, "revision_summary": "", "revision_number": 1}}, {"pk": 10, "model": "posts.mainpostrevision", "fields": {"content": "  sdfdf ", "modified_date": "2014-08-13T05:30:29.143Z", "post": 2, "revision_summary": " No summary ", "revision_number": 2}}, {"pk": 1, "model": "posts.replypostrevision", "fields": {"content": "some reply", "modified_date": "2014-08-13T00:18:56.311Z", "post": 1, "revision_summary": "", "revision_number": 1}}, {"pk": 2, "model": "posts.replypostrevision", "fields": {"content": "I'm adding another reply to test if the editting works", "modified_date": "2014-08-13T03:02:12.772Z", "post": 2, "revision_summary": "", "revision_number": 1}}, {"pk": 3, "model": "posts.replypostrevision", "fields": {"content": "", "modified_date": "2014-08-13T03:31:20.846Z", "post": 3, "revision_summary": "", "revision_number": 1}}, {"pk": 4, "model": "posts.replypostrevision", "fields": {"content": "The tutorials for using the ChIP-seq algorithms in Avadis NGS were helpful.\r\n\r\nCheck out the ChIP-seq tutorials on the Avadis NGS website.\r\n\r\nHere is the quick start guide to ChIP-seq:\r\n\r\nhttp://www.avadis-ngs.com/files/docs/Avadis_NGS_ChIP-Seq_Highlights.pdf", "modified_date": "2014-08-13T05:27:37.964Z", "post": 1, "revision_summary": "", "revision_number": 2}}, {"pk": 5, "model": "posts.replypostrevision", "fields": {"content": "Bailey T, Krajewski P, Ladunga I, Lefebvre C, Li Q, et al. (2013) Practical Guidelines for the Comprehensive Analysis of ChIP-seq Data. PLoS Comput Biol 9(11): e1003326. doi:10.1371/journal.pcbi.1003326\r\n\r\nhttp://www.ploscompbiol.org/article/info:doi/10.1371/journal.pcbi.1003326", "modified_date": "2014-08-13T05:28:09.288Z", "post": 2, "revision_summary": "", "revision_number": 2}}, {"pk": 6, "model": "posts.replypostrevision", "fields": {"content": "There's one here:\r\n\r\nhttp://elvis.misc.cranfield.ac.uk/CUBELP2/faces/CHIPSEQ.xhtml", "modified_date": "2014-08-13T05:28:24.538Z", "post": 3, "revision_summary": "", "revision_number": 2}}, {"pk": 1, "model": "posts.mainpost", "fields": {"view_count": 0, "author": 1, "title": "How About Starting A Tutorial For Chip Seq Data Analysis?", "reply_count": 0, "bookmark_count": 0, "created": "2014-08-12T06:33:49.708Z", "current_revision": 6, "vote_count": 0, "last_modified": "2014-08-13T05:27:06.112Z", "tags": [1], "accepted_answer": null}}, {"pk": 2, "model": "posts.mainpost", "fields": {"view_count": 0, "author": 1, "title": "This post name is invalid", "reply_count": 0, "bookmark_count": 0, "created": "2014-06-03T06:33:59Z", "current_revision": 10, "vote_count": 0, "last_modified": "2014-08-13T05:30:29.153Z", "tags": [2], "accepted_answer": null}}, {"pk": 3, "model": "posts.mainpost", "fields": {"view_count": 0, "author": 2, "title": "test time", "reply_count": 0, "bookmark_count": 0, "created": "2014-08-12T20:47:51.109Z", "current_revision": 4, "vote_count": 0, "last_modified": "2014-08-12T20:53:03.588Z", "tags": [1, 2, 3], "accepted_answer": null}}, {"pk": 4, "model": "posts.mainpost", "fields": {"view_count": 0, "author": 2, "title": "haha new post", "reply_count": 0, "bookmark_count": 0, "created": "2014-08-13T05:29:33.704Z", "current_revision": 7, "vote_count": 0, "last_modified": "2014-08-13T05:29:33.712Z", "tags": [], "accepted_answer": null}}, {"pk": 5, "model": "posts.mainpost", "fields": {"view_count": 0, "author": 2, "title": "I just want to post something to make index page pretty", "reply_count": 0, "bookmark_count": 0, "created": "2014-08-13T05:29:54.968Z", "current_revision": 8, "vote_count": 0, "last_modified": "2014-08-13T05:29:55.030Z", "tags": [], "accepted_answer": null}}, {"pk": 6, "model": "posts.mainpost", "fields": {"view_count": 0, "author": 2, "title": "I just want to post something to make index page pretty more ", "reply_count": 0, "bookmark_count": 0, "created": "2014-08-13T05:30:06.684Z", "current_revision": 9, "vote_count": 0, "last_modified": "2014-08-13T05:30:06.695Z", "tags": [], "accepted_answer": null}}, {"pk": 1, "model": "posts.replypost", "fields": {"created": "2014-08-13T00:18:56.293Z", "author": 1, "current_revision": 4, "vote_count": 0, "last_modified": "2014-08-13T05:27:37.978Z", "best_answer": false, "mainpost": 1}}, {"pk": 2, "model": "posts.replypost", "fields": {"created": "2014-08-13T03:02:12.766Z", "author": 1, "current_revision": 5, "vote_count": 0, "last_modified": "2014-08-13T05:28:09.294Z", "best_answer": false, "mainpost": 1}}, {"pk": 3, "model": "posts.replypost", "fields": {"created": "2014-08-13T03:31:20.801Z", "author": 1, "current_revision": 6, "vote_count": 0, "last_modified": "2014-08-13T05:28:24.741Z", "best_answer": false, "mainpost": 1}}, {"pk": 1, "model": "wiki.page", "fields": {"tags": [1, 2], "current_revision": 46, "title": "ChIP-Seq"}}, {"pk": 2, "model": "wiki.page", "fields": {"tags": [2], "current_revision": 29, "title": "pre-processing"}}, {"pk": 3, "model": "wiki.page", "fields": {"tags": [3], "current_revision": 36, "title": "normalization"}}, {"pk": 4, "model": "wiki.page", "fields": {"tags": [4], "current_revision": 4, "title": "post-processing"}}, {"pk": 5, "model": "wiki.page", "fields": {"tags": [5], "current_revision": 30, "title": "haha"}}, {"pk": 6, "model": "wiki.page", "fields": {"tags": [], "current_revision": 33, "title": "some blank"}}, {"pk": 7, "model": "wiki.page", "fields": {"tags": [7], "current_revision": 39, "title": "RNA-Seq"}}, {"pk": 1, "model": "wiki.pagerevision", "fields": {"content": "", "modified_date": "2014-07-20T20:34:00.230Z", "revision_summary": "", "revision_number": 1, "page": 1}}, {"pk": 2, "model": "wiki.pagerevision", "fields": {"content": "", "modified_date": "2014-07-21T04:36:44.950Z", "revision_summary": "", "revision_number": 1, "page": 2}}, {"pk": 3, "model": "wiki.pagerevision", "fields": {"content": "", "modified_date": "2014-07-21T04:37:42.610Z", "revision_summary": "", "revision_number": 1, "page": 3}}, {"pk": 4, "model": "wiki.pagerevision", "fields": {"content": "", "modified_date": "2014-07-21T04:39:25.607Z", "revision_summary": "", "revision_number": 1, "page": 4}}, {"pk": 5, "model": "wiki.pagerevision", "fields": {"content": "= ChIP-Seq =", "modified_date": "2014-07-23T00:15:20.124Z", "revision_summary": " No summary", "revision_number": 2, "page": 1}}, {"pk": 6, "model": "wiki.pagerevision", "fields": {"content": " # ChIP-Seq #", "modified_date": "2014-07-23T00:17:07.722Z", "revision_summary": " No summary", "revision_number": 3, "page": 1}}, {"pk": 7, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq # ", "modified_date": "2014-07-23T00:17:59.978Z", "revision_summary": " No summary", "revision_number": 4, "page": 1}}, {"pk": 8, "model": "wiki.pagerevision", "fields": {"content": " # ChIP-Seq #", "modified_date": "2014-07-23T00:18:07.300Z", "revision_summary": " No summary", "revision_number": 5, "page": 1}}, {"pk": 9, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq # ", "modified_date": "2014-07-23T00:18:19.156Z", "revision_summary": " No summary", "revision_number": 6, "page": 1}}, {"pk": 10, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #", "modified_date": "2014-07-23T00:18:28.413Z", "revision_summary": " No summary", "revision_number": 7, "page": 1}}, {"pk": 11, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #", "modified_date": "2014-07-23T00:19:09.168Z", "revision_summary": " No summary", "revision_number": 8, "page": 1}}, {"pk": 12, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\n#!python\r\n#import south\r\n#print x", "modified_date": "2014-07-23T00:19:41.188Z", "revision_summary": " No summary", "revision_number": 9, "page": 1}}, {"pk": 13, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\n    #!python\r\n    import south\r\n    print x", "modified_date": "2014-07-23T00:20:07.974Z", "revision_summary": " No summary", "revision_number": 10, "page": 1}}, {"pk": 14, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\n#!python\r\nimport south\r\n    print x", "modified_date": "2014-07-23T00:21:03.994Z", "revision_summary": " No summary", "revision_number": 11, "page": 1}}, {"pk": 15, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\n    #!python\r\n    import south\r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T00:21:32.420Z", "revision_summary": " No summary", "revision_number": 12, "page": 1}}, {"pk": 16, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T00:23:59.958Z", "revision_summary": " No summary", "revision_number": 13, "page": 1}}, {"pk": 17, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T01:09:56.192Z", "revision_summary": " No summary", "revision_number": 14, "page": 1}}, {"pk": 18, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T01:10:07.899Z", "revision_summary": " No summary", "revision_number": 15, "page": 1}}, {"pk": 19, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n   #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T01:10:17.170Z", "revision_summary": " No summary", "revision_number": 16, "page": 1}}, {"pk": 20, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n   #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T01:10:28.773Z", "revision_summary": " No summary", "revision_number": 17, "page": 1}}, {"pk": 21, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n   #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T01:10:41.633Z", "revision_summary": " No summary", "revision_number": 18, "page": 1}}, {"pk": 22, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    print x", "modified_date": "2014-07-23T01:10:56.042Z", "revision_summary": " No summary", "revision_number": 19, "page": 1}}, {"pk": 23, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    print x", "modified_date": "2014-07-23T01:14:33.081Z", "revision_summary": " No summary", "revision_number": 20, "page": 1}}, {"pk": 24, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    print x", "modified_date": "2014-07-23T01:18:15.360Z", "revision_summary": " No summary", "revision_number": 21, "page": 1}}, {"pk": 25, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-07-23T01:19:42.516Z", "revision_summary": " No summary", "revision_number": 22, "page": 1}}, {"pk": 26, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-07-23T04:41:52.742Z", "revision_summary": " No summary", "revision_number": 23, "page": 1}}, {"pk": 27, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-07-23T04:43:51.164Z", "revision_summary": " No summary", "revision_number": 24, "page": 1}}, {"pk": 28, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-07-23T04:44:24.206Z", "revision_summary": " No summary", "revision_number": 25, "page": 1}}, {"pk": 29, "model": "wiki.pagerevision", "fields": {"content": "sfdf", "modified_date": "2014-07-23T21:46:05.926Z", "revision_summary": " No summary", "revision_number": 2, "page": 2}}, {"pk": 30, "model": "wiki.pagerevision", "fields": {"content": "", "modified_date": "2014-07-26T02:29:28.851Z", "revision_summary": "", "revision_number": 1, "page": 5}}, {"pk": 31, "model": "wiki.pagerevision", "fields": {"content": "# ChIP-Seq #\r\n\r\nChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-07-28T02:16:19.635Z", "revision_summary": " No summary", "revision_number": 26, "page": 1}}, {"pk": 32, "model": "wiki.pagerevision", "fields": {"content": "ChIP-Seq is a technology to blah blah \r\n\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-07-28T02:22:15.372Z", "revision_summary": " No summary", "revision_number": 27, "page": 1}}, {"pk": 33, "model": "wiki.pagerevision", "fields": {"content": " Please enter something here. ", "modified_date": "2014-08-01T05:47:43.460Z", "revision_summary": " No summary ", "revision_number": 1, "page": 6}}, {"pk": 34, "model": "wiki.pagerevision", "fields": {"content": "ChIP-Seq is a technology to blah blah \r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-08-01T06:12:55.806Z", "revision_summary": " No summary", "revision_number": 28, "page": 1}}, {"pk": 35, "model": "wiki.pagerevision", "fields": {"content": "ChIP-Seq is a technology to blah blah \r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-08-01T06:13:33.330Z", "revision_summary": " No summary", "revision_number": 29, "page": 1}}, {"pk": 36, "model": "wiki.pagerevision", "fields": {"content": "Here it some link to [[notexist]]", "modified_date": "2014-08-01T06:14:09.719Z", "revision_summary": " No summary", "revision_number": 2, "page": 3}}, {"pk": 37, "model": "wiki.pagerevision", "fields": {"content": "## This is title 1 \r\n\r\n## This is title 2\r\n\r\n### sub-section 1\r\n\r\n### sub-section 2\r\n\r\nChIP-Seq is a technology to blah blah \r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-08-01T06:24:23.866Z", "revision_summary": " No summary", "revision_number": 30, "page": 1}}, {"pk": 38, "model": "wiki.pagerevision", "fields": {"content": "[TOC]\r\n\r\n## This is title 1 \r\n\r\n## This is title 2\r\n\r\n### sub-section 1\r\n\r\n### sub-section 2\r\n\r\nChIP-Seq is a technology to blah blah \r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>", "modified_date": "2014-08-01T06:25:14.420Z", "revision_summary": " No summary", "revision_number": 31, "page": 1}}, {"pk": 39, "model": "wiki.pagerevision", "fields": {"content": "", "modified_date": "2014-08-13T04:42:02.966Z", "revision_summary": "", "revision_number": 1, "page": 7}}, {"pk": 40, "model": "wiki.pagerevision", "fields": {"content": "[TOC]\r\n\r\n## This is title 1 \r\n\r\n## This is title 2\r\n\r\n### sub-section 1\r\n\r\n### sub-section 2\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^1]: This is a footnote content.\r\n", "modified_date": "2014-08-13T05:18:49.852Z", "revision_summary": " No summary", "revision_number": 32, "page": 1}}, {"pk": 41, "model": "wiki.pagerevision", "fields": {"content": "[TOC]\r\n\r\n## This is title 1 \r\n\r\n## This is title 2\r\n\r\n### sub-section 1\r\n\r\n### sub-section 2\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^1]: PePr: A peak-calling prioritization pipeline to identify consistent or differential peaks from replicated ChIP-Seq data.\r\n", "modified_date": "2014-08-13T05:21:45.921Z", "revision_summary": " No summary", "revision_number": 33, "page": 1}}, {"pk": 42, "model": "wiki.pagerevision", "fields": {"content": "[TOC]\r\n\r\nChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein\u2013DNA relations.\r\n## Uses of ChIP-seq\r\n\r\nChIP-seq is used primarily to determine how transcription factors and other chromatin-associated proteins influence phenotype-affecting mechanisms. Determining how proteins interact with DNA to regulate gene expression is essential for fully understanding many biological processes and disease states. This epigenetic information is complementary to genotype and expression analysis. ChIP-seq technology is currently seen primarily as an alternative to [[ChIP-chip]] which requires a hybridization array. This necessarily introduces some bias, as an array is restricted to a fixed number of probes. Sequencing, by contrast, is thought to have less bias, although the sequencing bias of different sequencing technologies is not yet fully understood.\r\n\r\n## Workflow of ChIP-sequencing\r\n\r\n### Part 1: ChIP\r\n\r\nChIP is a powerful method to selectively enrich for DNA sequences bound by a particular protein in living cells. However, the widespread use of this method has been limited by the lack of a sufficiently robust method to identify all of the enriched DNA sequences. The ChIP process enriches specific crosslinked DNA-protein complexes using an antibody against the protein of interest. For a good description of the ChIP wet lab protocol see ChIP-on-chip. Oligonucleotide adaptors are then added to the small stretches of DNA that were bound to the protein of interest to enable massively parallel sequencing.\r\n\r\n### Part 2: Sequencing\r\n\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^1]: PePr: A peak-calling prioritization pipeline to identify consistent or differential peaks from replicated ChIP-Seq data.\r\n", "modified_date": "2014-08-13T05:24:53.256Z", "revision_summary": " No summary", "revision_number": 34, "page": 1}}, {"pk": 43, "model": "wiki.pagerevision", "fields": {"content": "\r\nChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein\u2013DNA relations.\r\n\r\n[TOC]\r\n## Uses of ChIP-seq\r\n\r\nChIP-seq is used primarily to determine how transcription factors and other chromatin-associated proteins influence phenotype-affecting mechanisms. Determining how proteins interact with DNA to regulate gene expression is essential for fully understanding many biological processes and disease states. This epigenetic information is complementary to genotype and expression analysis. ChIP-seq technology is currently seen primarily as an alternative to [[ChIP-chip]] which requires a hybridization array. This necessarily introduces some bias, as an array is restricted to a fixed number of probes. Sequencing, by contrast, is thought to have less bias, although the sequencing bias of different sequencing technologies is not yet fully understood.\r\n\r\n## Workflow of ChIP-sequencing\r\n\r\n### Part 1: ChIP\r\n\r\nChIP is a powerful method to selectively enrich for DNA sequences bound by a particular protein in living cells. However, the widespread use of this method has been limited by the lack of a sufficiently robust method to identify all of the enriched DNA sequences. The ChIP process enriches specific crosslinked DNA-protein complexes using an antibody against the protein of interest. For a good description of the ChIP wet lab protocol see ChIP-on-chip. Oligonucleotide adaptors are then added to the small stretches of DNA that were bound to the protein of interest to enable massively parallel sequencing.\r\n\r\n### Part 2: Sequencing\r\n\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^1]: PePr: A peak-calling prioritization pipeline to identify consistent or differential peaks from replicated ChIP-Seq data.\r\n", "modified_date": "2014-08-13T17:48:41.702Z", "revision_summary": " No summary", "revision_number": 35, "page": 1}}, {"pk": 44, "model": "wiki.pagerevision", "fields": {"content": "ChIP-sequencing, also known as ChIP-seq, is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein\u2013DNA relations.\r\n\r\n[TOC]\r\n## Uses of ChIP-seq\r\n\r\nChIP-seq is used primarily to determine how transcription factors and other chromatin-associated proteins influence phenotype-affecting mechanisms. Determining how proteins interact with DNA to regulate gene expression is essential for fully understanding many biological processes and disease states. This epigenetic information is complementary to genotype and expression analysis. ChIP-seq technology is currently seen primarily as an alternative to [[ChIP-chip]] which requires a hybridization array. This necessarily introduces some bias, as an array is restricted to a fixed number of probes. Sequencing, by contrast, is thought to have less bias, although the sequencing bias of different sequencing technologies is not yet fully understood.\r\n\r\n## Workflow of ChIP-sequencing\r\n\r\n### Part 1: ChIP\r\n\r\nChIP is a powerful method to selectively enrich for DNA sequences bound by a particular protein in living cells. However, the widespread use of this method has been limited by the lack of a sufficiently robust method to identify all of the enriched DNA sequences. The ChIP process enriches specific crosslinked DNA-protein complexes using an antibody against the protein of interest. For a good description of the ChIP wet lab protocol see ChIP-on-chip. Oligonucleotide adaptors are then added to the small stretches of DNA that were bound to the protein of interest to enable massively parallel sequencing.\r\n\r\n### Part 2: Sequencing\r\n\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^1]: PePr: A peak-calling prioritization pipeline to identify consistent or differential peaks from replicated ChIP-Seq data.\r\n\r\n## References ", "modified_date": "2014-08-13T17:49:21.643Z", "revision_summary": " No summary", "revision_number": 36, "page": 1}}, {"pk": 45, "model": "wiki.pagerevision", "fields": {"content": "ChIP-sequencing, also known as ChIP-seq[^2], is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein\u2013DNA relations.\r\n\r\n[TOC]\r\n## Uses of ChIP-seq\r\n\r\nChIP-seq is used primarily to determine how transcription factors and other chromatin-associated proteins influence phenotype-affecting mechanisms. Determining how proteins interact with DNA to regulate gene expression is essential for fully understanding many biological processes and disease states. This epigenetic information is complementary to genotype and expression analysis. ChIP-seq technology is currently seen primarily as an alternative to [[ChIP-chip]] which requires a hybridization array. This necessarily introduces some bias, as an array is restricted to a fixed number of probes. Sequencing, by contrast, is thought to have less bias, although the sequencing bias of different sequencing technologies is not yet fully understood.\r\n\r\n## Workflow of ChIP-sequencing\r\n\r\n### Part 1: ChIP\r\n\r\nChIP is a powerful method to selectively enrich for DNA sequences bound by a particular protein in living cells. However, the widespread use of this method has been limited by the lack of a sufficiently robust method to identify all of the enriched DNA sequences. The ChIP process enriches specific crosslinked DNA-protein complexes using an antibody against the protein of interest. For a good description of the ChIP wet lab protocol see ChIP-on-chip. Oligonucleotide adaptors are then added to the small stretches of DNA that were bound to the protein of interest to enable massively parallel sequencing.\r\n\r\n### Part 2: Sequencing\r\n\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^1]: PePr: A peak-calling prioritization pipeline to identify consistent or differential peaks from replicated ChIP-Seq data.\r\n[^2]: some refenrece here. \r\n## References ", "modified_date": "2014-08-13T17:53:02.916Z", "revision_summary": " No summary", "revision_number": 37, "page": 1}}, {"pk": 46, "model": "wiki.pagerevision", "fields": {"content": "ChIP-sequencing, also known as ChIP-seq[^ref], is a method used to analyze protein interactions with DNA. ChIP-seq combines chromatin immunoprecipitation (ChIP) with massively parallel DNA sequencing to identify the binding sites of DNA-associated proteins. It can be used to map global binding sites precisely for any protein of interest. Previously, ChIP-on-chip was the most common technique utilized to study these protein\u2013DNA relations.\r\n\r\n[TOC]\r\n## Uses of ChIP-seq\r\n\r\nChIP-seq is used primarily to determine how transcription factors and other chromatin-associated proteins influence phenotype-affecting mechanisms. Determining how proteins interact with DNA to regulate gene expression is essential for fully understanding many biological processes and disease states. This epigenetic information is complementary to genotype and expression analysis. ChIP-seq technology is currently seen primarily as an alternative to [[ChIP-chip]] which requires a hybridization array. This necessarily introduces some bias, as an array is restricted to a fixed number of probes. Sequencing, by contrast, is thought to have less bias, although the sequencing bias of different sequencing technologies is not yet fully understood.\r\n\r\n## Workflow of ChIP-sequencing\r\n\r\n### Part 1: ChIP\r\n\r\nChIP is a powerful method to selectively enrich for DNA sequences bound by a particular protein in living cells. However, the widespread use of this method has been limited by the lack of a sufficiently robust method to identify all of the enriched DNA sequences. The ChIP process enriches specific crosslinked DNA-protein complexes using an antibody against the protein of interest. For a good description of the ChIP wet lab protocol see ChIP-on-chip. Oligonucleotide adaptors are then added to the small stretches of DNA that were bound to the protein of interest to enable massively parallel sequencing.\r\n\r\n### Part 2: Sequencing\r\n\r\n\r\nChIP-Seq is a technology to blah blah [^1]\r\nHere is a link to normalization: \r\n[[normalization]]\r\n    #!python\r\n    import south\r\n    from library import x,y\r\n    def function1(x,y)\r\n    return x + y \r\n    x = 13\r\n \r\n<pre><code class='python'> \r\nclass Tag(Page):\r\n        \r\n    #---- fields ----#\r\n    name = models.CharField(max_length=255, unique=True)\r\n    parent_page = models.OneToOneField(\"wiki.Page\",parent_link=True)\r\n    # record the times this tag is used\r\n    count = models.IntegerField(default=0)\r\n    # provide the tag structures\r\n    # can chain Tags that have tree structures. \r\n    parent = models.ForeignKey('self', related_name = \"children\",null=True, blank=True)\r\n    node_position = models.IntegerField(default=0)\r\n    \r\n    # the types of the tag\r\n    PROPOSED, APPROVED, WORKFLOW, SOFTWARE = range(4)\r\n    CATEGORY_CHOICE = [(PROPOSED, \"proposed\"), (APPROVED,\"approved\"), (WORKFLOW,\"workflow\"), (SOFTWARE,\"software\")]\r\n    categories = models.IntegerField(choices=CATEGORY_CHOICE, default=PROPOSED)\r\n    \r\n    class Meta: \r\n        get_latest_by= 'node_position'\r\n</code></pre>\r\n\r\n[^ref]: some refenrece here. \r\n[^1]: PePr: A peak-calling prioritization pipeline to identify consistent or differential peaks from replicated ChIP-Seq data.\r\n\r\n\r\n## References ", "modified_date": "2014-08-13T17:55:25.214Z", "revision_summary": " No summary", "revision_number": 38, "page": 1}}, {"pk": 1, "model": "users.userprofile", "fields": {"website": "", "following": [], "reputation": 1, "user": 2, "biography": "I'm just a tester created by lazy site admin."}}, {"pk": 2, "model": "users.userprofile", "fields": {"website": "", "following": [], "reputation": 1, "user": 1, "biography": ""}}, {"pk": 3, "model": "users.userprofile", "fields": {"website": "", "following": [], "reputation": 1, "user": 4, "biography": ""}}, {"pk": 4, "model": "users.userprofile", "fields": {"website": "", "following": [], "reputation": 1, "user": 3, "biography": ""}}, {"pk": 1, "model": "utils.comment", "fields": {"content": "I added a new comment here", "last_modified": "2014-08-13T02:39:01.700Z", "object_id": 1, "content_type": 10, "author": 1}}, {"pk": 2, "model": "utils.comment", "fields": {"content": "This is another comment that I added. ", "last_modified": "2014-08-13T02:45:21.763Z", "object_id": 1, "content_type": 10, "author": 1}}, {"pk": 3, "model": "utils.comment", "fields": {"content": "comment to this", "last_modified": "2014-08-13T03:06:44.801Z", "object_id": 1, "content_type": 10, "author": 1}}, {"pk": 4, "model": "utils.comment", "fields": {"content": "I commented on the reply", "last_modified": "2014-08-13T03:13:38.010Z", "object_id": 1, "content_type": 11, "author": 1}}, {"pk": 3, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 1, "object_id": 1, "content_type": 14, "choice": 1}}, {"pk": 4, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 1, "object_id": 1, "content_type": 10, "choice": 1}}, {"pk": 5, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 1, "object_id": 3, "content_type": 11, "choice": -1}}, {"pk": 6, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 1, "object_id": 2, "content_type": 11, "choice": -1}}, {"pk": 8, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 2, "object_id": 1, "content_type": 11, "choice": 1}}, {"pk": 9, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 2, "object_id": 2, "content_type": 11, "choice": 1}}, {"pk": 10, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 2, "object_id": 3, "content_type": 11, "choice": -1}}, {"pk": 11, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 2, "object_id": 1, "content_type": 14, "choice": 1}}, {"pk": 12, "model": "utils.vote", "fields": {"date": "2014-08-13", "voter": 2, "object_id": 1, "content_type": 10, "choice": 1}}, {"pk": 1, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.185Z", "object_repr": "another df", "object_id": "10", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 2, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.194Z", "object_repr": "rnsdf", "object_id": "9", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 3, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.198Z", "object_repr": "ef", "object_id": "8", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 4, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.200Z", "object_repr": "sf", "object_id": "7", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 5, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.202Z", "object_repr": "df", "object_id": "6", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 6, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.204Z", "object_repr": "RNA-Seq", "object_id": "5", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 7, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.206Z", "object_repr": "dd", "object_id": "4", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 8, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.209Z", "object_repr": "seq", "object_id": "3", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 9, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-21T04:36:29.211Z", "object_repr": "somethings", "object_id": "2", "change_message": "", "user": 1, "content_type": 7}}, {"pk": 10, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-24T19:36:35.102Z", "object_repr": "yyy", "object_id": "2", "change_message": "", "user": 1, "content_type": 4}}, {"pk": 11, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-24T20:59:51.148Z", "object_repr": "moderator", "object_id": "1", "change_message": "", "user": 1, "content_type": 3}}, {"pk": 12, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2014-07-24T21:00:39.020Z", "object_repr": "yyy", "object_id": "2", "change_message": "Changed groups.", "user": 1, "content_type": 4}}, {"pk": 13, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-26T02:44:13.186Z", "object_repr": "UserProfile object", "object_id": "1", "change_message": "", "user": 1, "content_type": 18}}, {"pk": 14, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2014-07-26T02:45:07.215Z", "object_repr": "UserProfile object", "object_id": "1", "change_message": "No fields changed.", "user": 1, "content_type": 18}}, {"pk": 15, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-28T04:28:01.684Z", "object_repr": "Up-vote, yanxiazh, 1", "object_id": "1", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 16, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-28T04:29:55.422Z", "object_repr": "Down-vote, yyy, 2", "object_id": "2", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 17, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-30T02:38:49.505Z", "object_repr": "Up-vote, yanxiazh, 1", "object_id": "1", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 18, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2014-07-30T08:27:59.517Z", "object_repr": "Up-vote, yanxiazh, 1", "object_id": "1", "change_message": "Changed choice.", "user": 1, "content_type": 19}}, {"pk": 19, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2014-07-30T08:29:12.636Z", "object_repr": "Down-vote, yanxiazh, 1", "object_id": "1", "change_message": "No fields changed.", "user": 1, "content_type": 19}}, {"pk": 20, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-30T08:35:23.136Z", "object_repr": "Up-vote, yyy, 1", "object_id": "2", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 21, "model": "admin.logentry", "fields": {"action_flag": 3, "action_time": "2014-07-30T09:36:02.428Z", "object_repr": "0, yanxiazh, 1", "object_id": "1", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 22, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2014-07-30T20:18:28.109Z", "object_repr": "UserProfile object", "object_id": "2", "change_message": "Changed user.", "user": 1, "content_type": 18}}, {"pk": 23, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-30T20:43:55.189Z", "object_repr": "Up-vote, test, 3", "object_id": "4", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 24, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-30T20:44:20.314Z", "object_repr": "Up-vote, newuser, 1", "object_id": "5", "change_message": "", "user": 1, "content_type": 19}}, {"pk": 25, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-30T21:03:19.454Z", "object_repr": "newuser", "object_id": "3", "change_message": "", "user": 1, "content_type": 18}}, {"pk": 26, "model": "admin.logentry", "fields": {"action_flag": 1, "action_time": "2014-07-30T21:03:25.229Z", "object_repr": "test", "object_id": "4", "change_message": "", "user": 1, "content_type": 18}}, {"pk": 27, "model": "admin.logentry", "fields": {"action_flag": 2, "action_time": "2014-08-12T20:52:18.734Z", "object_repr": "wdfdfsd", "object_id": "2", "change_message": "Changed created.", "user": 1, "content_type": 10}}]